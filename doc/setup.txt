cd ~/Documents/ai/phase02
virtualenv --system-site-packages -p python ./venv
source ./venv/bin/activate


[MANDATORY]
export PROJECT_ROOT=/data/ai/phase02/corvidae
export PROJECT_ROOT=/home/maarten.schermer/data/corivdae

[OPTIONAL]
export DWCA_FILE_PATH=/path/to/occurrences.txt (defaults to "dwca/Occurrence.txt")
export CLASS_IMAGE_MINIMUM=<n>  (defaults to 2)

[other defaults]
DwCA-file must be utf-8-sig
relevant DwCA-column headers: {'id': 'catalogNumber', 'taxon': 'scientificName', 'images': 'associatedMedia'}
associatedMedia: multi images concatenated by |


[FOLDERS] must be created manually (for now --> make a project_setup.py)


PROJECT_ROOT/
  ├── dwca/
  │    ├── nba_query.json
  │    └── Occurrence.txt
  │
  ├── lists/
  │    ├── classes.json
  │    ├── classes.csv
  │    ├── downloaded_images.csv
  │    └── images.csv
  │
  ├── log/  
  │    └── general.log  
  │
  └── images/
       ├── <subdir a>
       │    ├── image-1.jpg
       │    ├── image-2.jpg
       │    ├── ...
       │    └── image-n.jpg
       │
       └── <subdir b>
       └── ...
       └── <subdir n>


DwCA reader
  python dwca_reader.py 
  in:
    PROJECT_ROOT *
    DWCA_FILE_PATH [$PROJECT_ROOT/dwca/Occurrence.txt]
    CLASS_IMAGE_MINIMUM [2]
    DwCA-headers * (catalogNumber,scientificName,associatedMedia)
  out:
    $PROJECT_ROOT/lists/classes.json   (classname, image count)
    $PROJECT_ROOT/lists/images.csv    (classname, image URL)

    (general lists, these get copied to model dirs later)


Image Downloader
  python image_downloader.py
  in:
    PROJECT_ROOT *
    IMAGE_URL_TO_NAME [basename p.path]
        example: {'expression': '/file/id/|/format/[a-z]*', 'replace': '', 'postfix': '.jpg'}
    IMAGE_LIST_FILE [$PROJECT_ROOT/lists/images.csv]
  out:
    downloaded images [$PROJECT_ROOT/images/<subdirs>] subdirs have random name, max 1000 images per subdir
    $PROJECT_ROOT/lists/downloaded_images.csv

  (default skips locally existing images, yet always (re)writes downloaded_images.csv, so also run when you've only changed the class minimum)


ModelTrainer
  TODO: implement Test split



sudo docker-compose run tensorflow /code/dwca_reader.py
sudo docker-compose run tensorflow /code/image_downloader.py
sudo docker-compose run tensorflow /code/model_trainer.py
sudo docker-compose run tensorflow /code/model_analysis.py v1.x


v1.1--min-20
v1.1--min-50
v1.1--min-100